@import '_settings';

// List for placeholder names.
$-placeholders: ();

// Returns whether a placeholder exists.
@function placeholder-exists($name) {
  @if index($-placeholders, $name) == null {
    @return false;
  }
  @return true;
}

// Registers a placeholder.
@function -register-placeholder($name) {
  @if placeholder-exists($name) {
    @error 'The key `#{$name}` has already been registered.';
  }
  $-placeholders: append($-placeholders, $name) !global;
  @return $name;
}

// Defines a placeholder.
@mixin define-placeholder($name) {
  %#{$name} {
    $name: -register-placeholder($name);
    @content;
  }
}

// Returns the greatest common divider of a fraction
@function getGCD($a, $b)
{
	$a: abs($a);
	$b: abs($b);
	@if $b == 0 {
		@return $a;
	}
	@return getGCD($b, $a % $b);
}

// Simplifies a fraction
@function simplify($num, $den)
{
	$gcd: getGCD($num, $den);
	// If the fraction can be simplified, returns the class name of the simplified fraction
	@if round($gcd) == $gcd {
		$simple_num: $num/$gcd;
		$simple_den: $den/$gcd;
		$class: #{$prefix}-#{$simple_num}-#{$simple_den};
		@return $class;
	}
	@else {
		@return false;
	}
}

// Calculates the width of the column
@function getWidth($ratio)
{
	@return calc(( 100% - ( 1 / #{$ratio} - 1 ) * #{$gutter}) / 1 * #{$ratio});
}

// Returns the ratio of the column as a decimal value. Ex: cleanRatio(1/4) returns 0.25
@function cleanRatio($ratio)
{
  	// If the ratio is a percentage, it is divided by 100% to return a decimal value.
	@if is-number($ratio) and unit($ratio) == '%' {
		@return $ratio / 100%;
	}
	@else {
		@return $ratio;
	}
}

// Defines a column's declarations using the ratio passed as an argument
@mixin col($ratio)
{
	width: getWidth(cleanRatio($ratio));
	box-sizing: border-box;
	float: $direction;
}

// Defines a column's declarations when stacked
@mixin stack
{
	&.stack > * {
		display: block;
		clear: both;
		float: none;
		width: 100%;
		margin: {
			left:  auto;
			right: auto;
		};
		@content;
	}
}

// Generates the column classes
@mixin generateColumns
{
  	// A loop that generates class names and assigns them declarations using fractions
  	// Loop through the numerators
	@for $num from 1 through $max {
	  	// Loop through the denominators
		@for $den from $num through $max {
		  	// Prevent a class with an equal numerator and denumerator to be generated.
			@if $num < $den {
			  	// Create a placeholder using the user defined prefix
				@include define-placeholder(#{$prefix}-#{$num}-#{$den}) {
					// Include the declarations specific to that class
					@include col($num/$den);
				}
				// Check if the current fraction can be simplified
				@if simplify($num,$den) {
				  	// Create a class name for the current column
					.#{$prefix}-#{$num}-#{$den} {
					  	// Use the same declarations as the simplified placeholder
						@extend %#{simplify($num,$den)};
					}
				}
				// If the current fraction can't be simplified, create a class with its own declarations
				@else {
					.#{$prefix}-#{$num}-#{$den} {
						@include col($num/$den);
					}
				}
			}
		}
	}
}

// Generate the columns
@include generateColumns;

// List of directions
$directions: left center right;

// Iterate through the directions list and create classes for the values
@each $direction in $directions {
	@if $direction == center {
		.center {
			float: none;
			margin: 0 auto;
		}
	}
	@else {
		.#{$direction} {
			float: $direction;
		}
	}
}

// Create a container class using the user defined name
.#{$container} {
	box-sizing: border-box;
	&:after, &:before {
		content: '';
		display: block;
		clear: both;
	}
	& > [class*='#{$prefix}']:first-child {
		margin-left: 0;
	}
  	& > [class*='#{$prefix}']:last-child {
		margin-right: 0;
	}
  	& > [class*='#{$prefix}'] {
		margin: 0 $gutter / 2;
	}
	@include stack;
}